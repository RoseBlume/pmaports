From 3b2f7c502e713f75cd73793657eb58b55121d8c6 Mon Sep 17 00:00:00 2001
From: codedwrench <rick.04.1996@gmail.com>
Date: Wed, 29 Dec 2021 14:16:57 +0100
Subject: [PATCH 14/22] fix: re-add legacy bridge functions

---
 config                                  |  2 +-
 drivers/gpu/drm/amd/amdgpu/ps4_bridge.c | 20 +++++++------
 drivers/gpu/drm/drm_crtc_helper.c       | 37 +++++++++++++++++++++++++
 3 files changed, 50 insertions(+), 9 deletions(-)

diff --git a/config b/config
index 9b3e8c78ecf1..ceaac7d2d935 100644
--- a/config
+++ b/config
@@ -2262,7 +2262,7 @@ CONFIG_DRM_SCHED=y
 CONFIG_DRM_AMDGPU=y
 # CONFIG_DRM_AMDGPU_SI is not set
 CONFIG_DRM_AMDGPU_CIK=y
-CONFIG_DRM_AMDGPU_USERPTR=y
+# CONFIG_DRM_AMDGPU_USERPTR is not set
 
 #
 # ACP (Audio CoProcessor) Configuration
diff --git a/drivers/gpu/drm/amd/amdgpu/ps4_bridge.c b/drivers/gpu/drm/amd/amdgpu/ps4_bridge.c
index 86af15c134c4..d63ae6dddbb2 100644
--- a/drivers/gpu/drm/amd/amdgpu/ps4_bridge.c
+++ b/drivers/gpu/drm/amd/amdgpu/ps4_bridge.c
@@ -11,6 +11,10 @@
  * GNU General Public License for more details.
  */
 
+
+// TODO (ps4patches): Make functions atomic,
+//  https://lore.kernel.org/linux-arm-kernel/20211020181901.2114645-5-sam@ravnborg.org/
+
 #include <asm/ps4.h>
 
 #include <drm/drm_crtc.h>
@@ -676,7 +680,7 @@ int ps4_bridge_get_modes(struct drm_connector *connector)
 {
 	struct drm_device *dev = connector->dev;
 	struct drm_display_mode *newmode;
-	DRM_DEBUG_KMS("ps4_bridge_get_modes\n");
+	pr_info("ps4_bridge_get_modes\n");
 
 	newmode = drm_mode_duplicate(dev, &mode_1080p);
 	drm_mode_probed_add(connector, newmode);
@@ -687,7 +691,7 @@ int ps4_bridge_get_modes(struct drm_connector *connector)
 	//drm_mode_probed_add(connector, newmode);
 
 	drm_connector_update_edid_property(connector, NULL);
-    
+
 	return 0;
 }
 
@@ -738,7 +742,6 @@ int ps4_bridge_mode_valid(struct drm_connector *connector,
 static int ps4_bridge_attach(struct drm_bridge *bridge,
 			     enum drm_bridge_attach_flags flags)
 {
-	// TODO (ps4patches): Why is this in comments?
 	/* struct ps4_bridge *mn_bridge = bridge_to_ps4_bridge(bridge); */
 
 	return 0;
@@ -761,16 +764,17 @@ int ps4_bridge_register(struct drm_connector *connector,
 
 	mn_bridge->encoder = encoder;
 	mn_bridge->connector = connector;
+	mn_bridge->bridge.type = DRM_MODE_CONNECTOR_HDMIA;
 	mn_bridge->bridge.funcs = &ps4_bridge_funcs;
-	ret = drm_bridge_attach(mn_bridge->encoder, &mn_bridge->bridge, NULL, 0);
+
+	// TODO (ps4patches): This seems to be the new way of adding bridges
+	drm_bridge_add(&mn_bridge->bridge);
+
+	ret = drm_bridge_attach(mn_bridge->encoder, &mn_bridge->bridge, NULL, DRM_BRIDGE_ATTACH_NO_CONNECTOR);
 	if (ret) {
 		DRM_ERROR("Failed to initialize bridge with drm\n");
 		return -EINVAL;
 	}
 
-	//encoder->bridge = &mn_bridge->bridge;
-	// TODO (ps4patches): This seems to be the new way of adding bridges
-	drm_bridge_add(&mn_bridge->bridge);
-
 	return 0;
 }
diff --git a/drivers/gpu/drm/drm_crtc_helper.c b/drivers/gpu/drm/drm_crtc_helper.c
index bff917531f33..17bf9a7ff546 100644
--- a/drivers/gpu/drm/drm_crtc_helper.c
+++ b/drivers/gpu/drm/drm_crtc_helper.c
@@ -162,10 +162,15 @@ drm_encoder_disable(struct drm_encoder *encoder)
 	if (!encoder_funcs)
 		return;
 
+	struct drm_bridge* bridge = drm_bridge_chain_get_first_bridge(encoder);
+	drm_bridge_chain_disable(bridge);
+
 	if (encoder_funcs->disable)
 		(*encoder_funcs->disable)(encoder);
 	else if (encoder_funcs->dpms)
 		(*encoder_funcs->dpms)(encoder, DRM_MODE_DPMS_OFF);
+
+	drm_bridge_chain_post_disable(bridge);
 }
 
 static void __drm_helper_disable_unused_functions(struct drm_device *dev)
@@ -322,6 +327,14 @@ bool drm_crtc_helper_set_mode(struct drm_crtc *crtc,
 		if (!encoder_funcs)
 			continue;
 
+		struct drm_bridge* bridge = drm_bridge_chain_get_first_bridge(encoder);
+		ret = drm_bridge_chain_mode_fixup(bridge,
+					    mode, adjusted_mode);
+		if (!ret) {
+			DRM_DEBUG_KMS("Bridge fixup failed\n");
+			goto done;
+		}
+
 		encoder_funcs = encoder->helper_private;
 		if (encoder_funcs->mode_fixup) {
 			if (!(ret = encoder_funcs->mode_fixup(encoder, mode,
@@ -353,9 +366,14 @@ bool drm_crtc_helper_set_mode(struct drm_crtc *crtc,
 		if (!encoder_funcs)
 			continue;
 
+		struct drm_bridge* bridge = drm_bridge_chain_get_first_bridge(encoder);
+		drm_bridge_chain_disable(bridge);
+
 		/* Disable the encoders as the first thing we do. */
 		if (encoder_funcs->prepare)
 			encoder_funcs->prepare(encoder);
+
+		drm_bridge_chain_post_disable(bridge);
 	}
 
 	drm_crtc_prepare_encoders(dev);
@@ -382,6 +400,9 @@ bool drm_crtc_helper_set_mode(struct drm_crtc *crtc,
 			encoder->base.id, encoder->name, mode->name);
 		if (encoder_funcs->mode_set)
 			encoder_funcs->mode_set(encoder, mode, adjusted_mode);
+
+		struct drm_bridge* bridge = drm_bridge_chain_get_first_bridge(encoder);
+		drm_bridge_chain_mode_set(bridge, mode, adjusted_mode);
 	}
 
 	/* Now enable the clocks, plane, pipe, and connectors that we set up. */
@@ -396,8 +417,13 @@ bool drm_crtc_helper_set_mode(struct drm_crtc *crtc,
 		if (!encoder_funcs)
 			continue;
 
+		struct drm_bridge* bridge = drm_bridge_chain_get_first_bridge(encoder);
+		drm_bridge_chain_pre_enable(bridge);
+
 		if (encoder_funcs->commit)
 			encoder_funcs->commit(encoder);
+
+		drm_bridge_chain_enable(bridge);
 	}
 
 	/* Calculate and store various constants which
@@ -816,14 +842,25 @@ static int drm_helper_choose_encoder_dpms(struct drm_encoder *encoder)
 /* Helper which handles bridge ordering around encoder dpms */
 static void drm_helper_encoder_dpms(struct drm_encoder *encoder, int mode)
 {
+	struct drm_bridge* bridge = drm_bridge_chain_get_first_bridge(encoder);
 	const struct drm_encoder_helper_funcs *encoder_funcs;
 
 	encoder_funcs = encoder->helper_private;
 	if (!encoder_funcs)
 		return;
 
+	if (mode == DRM_MODE_DPMS_ON)
+		drm_bridge_chain_pre_enable(bridge);
+	else
+		drm_bridge_chain_disable(bridge);
+
 	if (encoder_funcs->dpms)
 		encoder_funcs->dpms(encoder, mode);
+
+	if (mode == DRM_MODE_DPMS_ON)
+		drm_bridge_chain_enable(bridge);
+	else
+		drm_bridge_chain_post_disable(bridge);
 }
 
 static int drm_helper_choose_crtc_dpms(struct drm_crtc *crtc)
-- 
2.45.1

